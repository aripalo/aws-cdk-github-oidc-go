// CDK constructs to use OpenID Connect for authenticating your Github Action workflow with AWS IAM
package awscdkgithuboidc

import (
	_init_ "github.com/aripalo/aws-cdk-github-oidc-go/awscdkgithuboidc/v2/jsii"
	_jsii_ "github.com/aws/jsii-runtime-go/runtime"

	"github.com/aripalo/aws-cdk-github-oidc-go/awscdkgithuboidc/v2/internal"
	"github.com/aws/aws-cdk-go/awscdk/v2"
	"github.com/aws/aws-cdk-go/awscdk/v2/awsiam"
	"github.com/aws/constructs-go/constructs/v10"
)

// Github Actions as OpenID Connect Identity Provider for AWS IAM. There can be only one (per AWS Account).
//
// Use `fromAccount` to retrieve a reference to existing Github OIDC provider.
// See: https://docs.github.com/en/actions/deployment/security-hardening-your-deployments/configuring-openid-connect-in-amazon-web-services
//
// Experimental.
type GithubActionsIdentityProvider interface {
	awsiam.OpenIdConnectProvider
	IGithubActionsIdentityProvider
	// The environment this resource belongs to.
	//
	// For resources that are created and managed by the CDK
	// (generally, those created by creating new class instances like Role, Bucket, etc.),
	// this is always the same as the environment of the stack they belong to;
	// however, for imported resources
	// (those obtained from static methods like fromRoleArn, fromBucketName, etc.),
	// that might be different than the stack they were imported into.
	// Experimental.
	Env() *awscdk.ResourceEnvironment
	// The tree node.
	// Experimental.
	Node() constructs.Node
	// The Amazon Resource Name (ARN) of the IAM OpenID Connect provider.
	// Experimental.
	OpenIdConnectProviderArn() *string
	// The issuer for OIDC Provider.
	// Experimental.
	OpenIdConnectProviderIssuer() *string
	// Returns a string-encoded token that resolves to the physical name that should be passed to the CloudFormation resource.
	//
	// This value will resolve to one of the following:
	// - a concrete value (e.g. `"my-awesome-bucket"`)
	// - `undefined`, when a name should be generated by CloudFormation
	// - a concrete name generated automatically during synthesis, in
	//    cross-environment scenarios.
	// Experimental.
	PhysicalName() *string
	// The stack in which this resource is defined.
	// Experimental.
	Stack() awscdk.Stack
	// Apply the given removal policy to this resource.
	//
	// The Removal Policy controls what happens to this resource when it stops
	// being managed by CloudFormation, either because you've removed it from the
	// CDK application or because you've made a change that requires the resource
	// to be replaced.
	//
	// The resource can be deleted (`RemovalPolicy.DESTROY`), or left in your AWS
	// account for data recovery and cleanup later (`RemovalPolicy.RETAIN`).
	// Experimental.
	ApplyRemovalPolicy(policy awscdk.RemovalPolicy)
	// Experimental.
	GeneratePhysicalName() *string
	// Returns an environment-sensitive token that should be used for the resource's "ARN" attribute (e.g. `bucket.bucketArn`).
	//
	// Normally, this token will resolve to `arnAttr`, but if the resource is
	// referenced across environments, `arnComponents` will be used to synthesize
	// a concrete ARN with the resource's physical name. Make sure to reference
	// `this.physicalName` in `arnComponents`.
	// Experimental.
	GetResourceArnAttribute(arnAttr *string, arnComponents *awscdk.ArnComponents) *string
	// Returns an environment-sensitive token that should be used for the resource's "name" attribute (e.g. `bucket.bucketName`).
	//
	// Normally, this token will resolve to `nameAttr`, but if the resource is
	// referenced across environments, it will be resolved to `this.physicalName`,
	// which will be a concrete name.
	// Experimental.
	GetResourceNameAttribute(nameAttr *string) *string
	// Returns a string representation of this construct.
	// Experimental.
	ToString() *string
}

// The jsii proxy struct for GithubActionsIdentityProvider
type jsiiProxy_GithubActionsIdentityProvider struct {
	internal.Type__awsiamOpenIdConnectProvider
	jsiiProxy_IGithubActionsIdentityProvider
}

func (j *jsiiProxy_GithubActionsIdentityProvider) Env() *awscdk.ResourceEnvironment {
	var returns *awscdk.ResourceEnvironment
	_jsii_.Get(
		j,
		"env",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_GithubActionsIdentityProvider) Node() constructs.Node {
	var returns constructs.Node
	_jsii_.Get(
		j,
		"node",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_GithubActionsIdentityProvider) OpenIdConnectProviderArn() *string {
	var returns *string
	_jsii_.Get(
		j,
		"openIdConnectProviderArn",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_GithubActionsIdentityProvider) OpenIdConnectProviderIssuer() *string {
	var returns *string
	_jsii_.Get(
		j,
		"openIdConnectProviderIssuer",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_GithubActionsIdentityProvider) PhysicalName() *string {
	var returns *string
	_jsii_.Get(
		j,
		"physicalName",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_GithubActionsIdentityProvider) Stack() awscdk.Stack {
	var returns awscdk.Stack
	_jsii_.Get(
		j,
		"stack",
		&returns,
	)
	return returns
}


// Define a new Github OpenID Connect Identity PRovider for AWS IAM.
//
// There can be only one (per AWS Account).
//
// Example:
//   new GithubActionsIdentityProvider(scope, "GithubProvider");
//
// Experimental.
func NewGithubActionsIdentityProvider(scope constructs.Construct, id *string) GithubActionsIdentityProvider {
	_init_.Initialize()

	if err := validateNewGithubActionsIdentityProviderParameters(scope, id); err != nil {
		panic(err)
	}
	j := jsiiProxy_GithubActionsIdentityProvider{}

	_jsii_.Create(
		"aws-cdk-github-oidc.GithubActionsIdentityProvider",
		[]interface{}{scope, id},
		&j,
	)

	return &j
}

// Define a new Github OpenID Connect Identity PRovider for AWS IAM.
//
// There can be only one (per AWS Account).
//
// Example:
//   new GithubActionsIdentityProvider(scope, "GithubProvider");
//
// Experimental.
func NewGithubActionsIdentityProvider_Override(g GithubActionsIdentityProvider, scope constructs.Construct, id *string) {
	_init_.Initialize()

	_jsii_.Create(
		"aws-cdk-github-oidc.GithubActionsIdentityProvider",
		[]interface{}{scope, id},
		g,
	)
}

// Retrieve a reference to existing Github OIDC provider in your AWS account.
//
// An AWS account can only have single Github OIDC provider configured into it,
// so internally the reference is made by constructing the ARN from AWS
// Account ID & Github issuer URL.
//
// Returns: a CDK Construct representing the Github OIDC provider.
//
// Example:
//   GithubActionsIdentityProvider.fromAccount(scope, "GithubProvider");
//
// Experimental.
func GithubActionsIdentityProvider_FromAccount(scope constructs.Construct, id *string) IGithubActionsIdentityProvider {
	_init_.Initialize()

	if err := validateGithubActionsIdentityProvider_FromAccountParameters(scope, id); err != nil {
		panic(err)
	}
	var returns IGithubActionsIdentityProvider

	_jsii_.StaticInvoke(
		"aws-cdk-github-oidc.GithubActionsIdentityProvider",
		"fromAccount",
		[]interface{}{scope, id},
		&returns,
	)

	return returns
}

// Imports an Open ID connect provider from an ARN.
// Experimental.
func GithubActionsIdentityProvider_FromOpenIdConnectProviderArn(scope constructs.Construct, id *string, openIdConnectProviderArn *string) awsiam.IOpenIdConnectProvider {
	_init_.Initialize()

	if err := validateGithubActionsIdentityProvider_FromOpenIdConnectProviderArnParameters(scope, id, openIdConnectProviderArn); err != nil {
		panic(err)
	}
	var returns awsiam.IOpenIdConnectProvider

	_jsii_.StaticInvoke(
		"aws-cdk-github-oidc.GithubActionsIdentityProvider",
		"fromOpenIdConnectProviderArn",
		[]interface{}{scope, id, openIdConnectProviderArn},
		&returns,
	)

	return returns
}

// Checks if `x` is a construct.
//
// Returns: true if `x` is an object created from a class which extends `Construct`.
// Deprecated: use `x instanceof Construct` instead.
func GithubActionsIdentityProvider_IsConstruct(x interface{}) *bool {
	_init_.Initialize()

	if err := validateGithubActionsIdentityProvider_IsConstructParameters(x); err != nil {
		panic(err)
	}
	var returns *bool

	_jsii_.StaticInvoke(
		"aws-cdk-github-oidc.GithubActionsIdentityProvider",
		"isConstruct",
		[]interface{}{x},
		&returns,
	)

	return returns
}

// Check whether the given construct is a Resource.
// Experimental.
func GithubActionsIdentityProvider_IsResource(construct constructs.IConstruct) *bool {
	_init_.Initialize()

	if err := validateGithubActionsIdentityProvider_IsResourceParameters(construct); err != nil {
		panic(err)
	}
	var returns *bool

	_jsii_.StaticInvoke(
		"aws-cdk-github-oidc.GithubActionsIdentityProvider",
		"isResource",
		[]interface{}{construct},
		&returns,
	)

	return returns
}

func GithubActionsIdentityProvider_Issuer() *string {
	_init_.Initialize()
	var returns *string
	_jsii_.StaticGet(
		"aws-cdk-github-oidc.GithubActionsIdentityProvider",
		"issuer",
		&returns,
	)
	return returns
}

func GithubActionsIdentityProvider_Thumbprints() *[]*string {
	_init_.Initialize()
	var returns *[]*string
	_jsii_.StaticGet(
		"aws-cdk-github-oidc.GithubActionsIdentityProvider",
		"thumbprints",
		&returns,
	)
	return returns
}

func (g *jsiiProxy_GithubActionsIdentityProvider) ApplyRemovalPolicy(policy awscdk.RemovalPolicy) {
	if err := g.validateApplyRemovalPolicyParameters(policy); err != nil {
		panic(err)
	}
	_jsii_.InvokeVoid(
		g,
		"applyRemovalPolicy",
		[]interface{}{policy},
	)
}

func (g *jsiiProxy_GithubActionsIdentityProvider) GeneratePhysicalName() *string {
	var returns *string

	_jsii_.Invoke(
		g,
		"generatePhysicalName",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (g *jsiiProxy_GithubActionsIdentityProvider) GetResourceArnAttribute(arnAttr *string, arnComponents *awscdk.ArnComponents) *string {
	if err := g.validateGetResourceArnAttributeParameters(arnAttr, arnComponents); err != nil {
		panic(err)
	}
	var returns *string

	_jsii_.Invoke(
		g,
		"getResourceArnAttribute",
		[]interface{}{arnAttr, arnComponents},
		&returns,
	)

	return returns
}

func (g *jsiiProxy_GithubActionsIdentityProvider) GetResourceNameAttribute(nameAttr *string) *string {
	if err := g.validateGetResourceNameAttributeParameters(nameAttr); err != nil {
		panic(err)
	}
	var returns *string

	_jsii_.Invoke(
		g,
		"getResourceNameAttribute",
		[]interface{}{nameAttr},
		&returns,
	)

	return returns
}

func (g *jsiiProxy_GithubActionsIdentityProvider) ToString() *string {
	var returns *string

	_jsii_.Invoke(
		g,
		"toString",
		nil, // no parameters
		&returns,
	)

	return returns
}

