package awscdkgithuboidc

import (
	_init_ "github.com/aripalo/aws-cdk-github-oidc-go/awscdkgithuboidc/v2/jsii"
	_jsii_ "github.com/aws/jsii-runtime-go/runtime"

	"github.com/aripalo/aws-cdk-github-oidc-go/awscdkgithuboidc/v2/internal"
	"github.com/aws/aws-cdk-go/awscdk/v2"
	"github.com/aws/aws-cdk-go/awscdk/v2/awsiam"
	"github.com/aws/constructs-go/constructs/v10"
)

// Define an IAM Role that can be assumed by Github Actions workflow via Github OpenID Connect Identity Provider.
//
// Besides `GithubConfiguration`, you may pass in any `iam.RoleProps` except `assumedBy`
// which will be defined by this construct (CDK will fail if you do).
//
// Example:
//   const uploadRole = new GithubActionsRole(scope, "UploadRole", {
//     provider: GithubActionsIdentityProvider.fromAccount(scope, "GithubProvider"),
//     owner: 'octo-org',
//     repo: 'octo-repo',
//     filter: 'ref:refs/tags/v*',
//     roleName: 'MyUploadRole',
//   });
//
//   myBucket.grantWrite(uploadRole);
//
// Experimental.
type GithubActionsRole interface {
	awsiam.Role
	// When this Principal is used in an AssumeRole policy, the action to use.
	// Experimental.
	AssumeRoleAction() *string
	// The assume role policy document associated with this role.
	// Experimental.
	AssumeRolePolicy() awsiam.PolicyDocument
	// The environment this resource belongs to.
	//
	// For resources that are created and managed by the CDK
	// (generally, those created by creating new class instances like Role, Bucket, etc.),
	// this is always the same as the environment of the stack they belong to;
	// however, for imported resources
	// (those obtained from static methods like fromRoleArn, fromBucketName, etc.),
	// that might be different than the stack they were imported into.
	// Experimental.
	Env() *awscdk.ResourceEnvironment
	// The principal to grant permissions to.
	// Experimental.
	GrantPrincipal() awsiam.IPrincipal
	// The tree node.
	// Experimental.
	Node() constructs.Node
	// Returns the permissions boundary attached to this role.
	// Experimental.
	PermissionsBoundary() awsiam.IManagedPolicy
	// Returns a string-encoded token that resolves to the physical name that should be passed to the CloudFormation resource.
	//
	// This value will resolve to one of the following:
	// - a concrete value (e.g. `"my-awesome-bucket"`)
	// - `undefined`, when a name should be generated by CloudFormation
	// - a concrete name generated automatically during synthesis, in
	//   cross-environment scenarios.
	// Experimental.
	PhysicalName() *string
	// Returns the role.
	// Experimental.
	PolicyFragment() awsiam.PrincipalPolicyFragment
	// The AWS account ID of this principal.
	//
	// Can be undefined when the account is not known
	// (for example, for service principals).
	// Can be a Token - in that case,
	// it's assumed to be AWS::AccountId.
	// Experimental.
	PrincipalAccount() *string
	// Returns the ARN of this role.
	// Experimental.
	RoleArn() *string
	// Returns the stable and unique string identifying the role.
	//
	// For example,
	// AIDAJQABLZS4A3QDU576Q.
	// Experimental.
	RoleId() *string
	// Returns the name of the role.
	// Experimental.
	RoleName() *string
	// The stack in which this resource is defined.
	// Experimental.
	Stack() awscdk.Stack
	// Attaches a managed policy to this role.
	// Experimental.
	AddManagedPolicy(policy awsiam.IManagedPolicy)
	// Add to the policy of this principal.
	// Experimental.
	AddToPolicy(statement awsiam.PolicyStatement) *bool
	// Adds a permission to the role's default policy document.
	//
	// If there is no default policy attached to this role, it will be created.
	// Experimental.
	AddToPrincipalPolicy(statement awsiam.PolicyStatement) *awsiam.AddToPrincipalPolicyResult
	// Apply the given removal policy to this resource.
	//
	// The Removal Policy controls what happens to this resource when it stops
	// being managed by CloudFormation, either because you've removed it from the
	// CDK application or because you've made a change that requires the resource
	// to be replaced.
	//
	// The resource can be deleted (`RemovalPolicy.DESTROY`), or left in your AWS
	// account for data recovery and cleanup later (`RemovalPolicy.RETAIN`).
	// Experimental.
	ApplyRemovalPolicy(policy awscdk.RemovalPolicy)
	// Attaches a policy to this role.
	// Experimental.
	AttachInlinePolicy(policy awsiam.Policy)
	// Experimental.
	GeneratePhysicalName() *string
	// Returns an environment-sensitive token that should be used for the resource's "ARN" attribute (e.g. `bucket.bucketArn`).
	//
	// Normally, this token will resolve to `arnAttr`, but if the resource is
	// referenced across environments, `arnComponents` will be used to synthesize
	// a concrete ARN with the resource's physical name. Make sure to reference
	// `this.physicalName` in `arnComponents`.
	// Experimental.
	GetResourceArnAttribute(arnAttr *string, arnComponents *awscdk.ArnComponents) *string
	// Returns an environment-sensitive token that should be used for the resource's "name" attribute (e.g. `bucket.bucketName`).
	//
	// Normally, this token will resolve to `nameAttr`, but if the resource is
	// referenced across environments, it will be resolved to `this.physicalName`,
	// which will be a concrete name.
	// Experimental.
	GetResourceNameAttribute(nameAttr *string) *string
	// Grant the actions defined in actions to the identity Principal on this resource.
	// Experimental.
	Grant(grantee awsiam.IPrincipal, actions ...*string) awsiam.Grant
	// Grant permissions to the given principal to assume this role.
	// Experimental.
	GrantAssumeRole(identity awsiam.IPrincipal) awsiam.Grant
	// Grant permissions to the given principal to pass this role.
	// Experimental.
	GrantPassRole(identity awsiam.IPrincipal) awsiam.Grant
	// Returns a string representation of this construct.
	// Experimental.
	ToString() *string
	// Return a copy of this Role object whose Policies will not be updated.
	//
	// Use the object returned by this method if you want this Role to be used by
	// a construct without it automatically updating the Role's Policies.
	//
	// If you do, you are responsible for adding the correct statements to the
	// Role's policies yourself.
	// Experimental.
	WithoutPolicyUpdates(options *awsiam.WithoutPolicyUpdatesOptions) awsiam.IRole
}

// The jsii proxy struct for GithubActionsRole
type jsiiProxy_GithubActionsRole struct {
	internal.Type__awsiamRole
}

func (j *jsiiProxy_GithubActionsRole) AssumeRoleAction() *string {
	var returns *string
	_jsii_.Get(
		j,
		"assumeRoleAction",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_GithubActionsRole) AssumeRolePolicy() awsiam.PolicyDocument {
	var returns awsiam.PolicyDocument
	_jsii_.Get(
		j,
		"assumeRolePolicy",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_GithubActionsRole) Env() *awscdk.ResourceEnvironment {
	var returns *awscdk.ResourceEnvironment
	_jsii_.Get(
		j,
		"env",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_GithubActionsRole) GrantPrincipal() awsiam.IPrincipal {
	var returns awsiam.IPrincipal
	_jsii_.Get(
		j,
		"grantPrincipal",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_GithubActionsRole) Node() constructs.Node {
	var returns constructs.Node
	_jsii_.Get(
		j,
		"node",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_GithubActionsRole) PermissionsBoundary() awsiam.IManagedPolicy {
	var returns awsiam.IManagedPolicy
	_jsii_.Get(
		j,
		"permissionsBoundary",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_GithubActionsRole) PhysicalName() *string {
	var returns *string
	_jsii_.Get(
		j,
		"physicalName",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_GithubActionsRole) PolicyFragment() awsiam.PrincipalPolicyFragment {
	var returns awsiam.PrincipalPolicyFragment
	_jsii_.Get(
		j,
		"policyFragment",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_GithubActionsRole) PrincipalAccount() *string {
	var returns *string
	_jsii_.Get(
		j,
		"principalAccount",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_GithubActionsRole) RoleArn() *string {
	var returns *string
	_jsii_.Get(
		j,
		"roleArn",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_GithubActionsRole) RoleId() *string {
	var returns *string
	_jsii_.Get(
		j,
		"roleId",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_GithubActionsRole) RoleName() *string {
	var returns *string
	_jsii_.Get(
		j,
		"roleName",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_GithubActionsRole) Stack() awscdk.Stack {
	var returns awscdk.Stack
	_jsii_.Get(
		j,
		"stack",
		&returns,
	)
	return returns
}


// Define an IAM Role that can be assumed by Github Actions workflow via Github OpenID Connect Identity Provider.
//
// Besides `GithubConfiguration`, you may pass in any `iam.RoleProps` except `assumedBy`
// which will be defined by this construct (CDK will fail if you do).
//
// Example:
//   const uploadRole = new GithubActionsRole(scope, "UploadRole", {
//     provider: GithubActionsIdentityProvider.fromAccount(scope, "GithubProvider"),
//     owner: 'octo-org',
//     repo: 'octo-repo',
//     filter: 'ref:refs/tags/v*',
//     roleName: 'MyUploadRole',
//   });
//
//   myBucket.grantWrite(uploadRole);
//
// Experimental.
func NewGithubActionsRole(scope constructs.Construct, id *string, props *GithubActionsRoleProps) GithubActionsRole {
	_init_.Initialize()

	if err := validateNewGithubActionsRoleParameters(scope, id, props); err != nil {
		panic(err)
	}
	j := jsiiProxy_GithubActionsRole{}

	_jsii_.Create(
		"aws-cdk-github-oidc.GithubActionsRole",
		[]interface{}{scope, id, props},
		&j,
	)

	return &j
}

// Define an IAM Role that can be assumed by Github Actions workflow via Github OpenID Connect Identity Provider.
//
// Besides `GithubConfiguration`, you may pass in any `iam.RoleProps` except `assumedBy`
// which will be defined by this construct (CDK will fail if you do).
//
// Example:
//   const uploadRole = new GithubActionsRole(scope, "UploadRole", {
//     provider: GithubActionsIdentityProvider.fromAccount(scope, "GithubProvider"),
//     owner: 'octo-org',
//     repo: 'octo-repo',
//     filter: 'ref:refs/tags/v*',
//     roleName: 'MyUploadRole',
//   });
//
//   myBucket.grantWrite(uploadRole);
//
// Experimental.
func NewGithubActionsRole_Override(g GithubActionsRole, scope constructs.Construct, id *string, props *GithubActionsRoleProps) {
	_init_.Initialize()

	_jsii_.Create(
		"aws-cdk-github-oidc.GithubActionsRole",
		[]interface{}{scope, id, props},
		g,
	)
}

// Customize the creation of IAM roles within the given scope.
//
// It is recommended that you **do not** use this method and instead allow
// CDK to manage role creation. This should only be used
// in environments where CDK applications are not allowed to created IAM roles.
//
// This can be used to prevent the CDK application from creating roles
// within the given scope and instead replace the references to the roles with
// precreated role names. A report will be synthesized in the cloud assembly (i.e. cdk.out)
// that will contain the list of IAM roles that would have been created along with the
// IAM policy statements that the role should contain. This report can then be used
// to create the IAM roles outside of CDK and then the created role names can be provided
// in `usePrecreatedRoles`.
//
// Example:
//   declare const app: App;
//   iam.Role.customizeRoles(app, {
//     usePrecreatedRoles: {
//       'ConstructPath/To/Role': 'my-precreated-role-name',
//     },
//   });
//
// Experimental.
func GithubActionsRole_CustomizeRoles(scope constructs.Construct, options *awsiam.CustomizeRolesOptions) {
	_init_.Initialize()

	if err := validateGithubActionsRole_CustomizeRolesParameters(scope, options); err != nil {
		panic(err)
	}
	_jsii_.StaticInvokeVoid(
		"aws-cdk-github-oidc.GithubActionsRole",
		"customizeRoles",
		[]interface{}{scope, options},
	)
}

// Import an external role by ARN.
//
// If the imported Role ARN is a Token (such as a
// `CfnParameter.valueAsString` or a `Fn.importValue()`) *and* the referenced
// role has a `path` (like `arn:...:role/AdminRoles/Alice`), the
// `roleName` property will not resolve to the correct value. Instead it
// will resolve to the first path component. We unfortunately cannot express
// the correct calculation of the full path name as a CloudFormation
// expression. In this scenario the Role ARN should be supplied without the
// `path` in order to resolve the correct role resource.
// Experimental.
func GithubActionsRole_FromRoleArn(scope constructs.Construct, id *string, roleArn *string, options *awsiam.FromRoleArnOptions) awsiam.IRole {
	_init_.Initialize()

	if err := validateGithubActionsRole_FromRoleArnParameters(scope, id, roleArn, options); err != nil {
		panic(err)
	}
	var returns awsiam.IRole

	_jsii_.StaticInvoke(
		"aws-cdk-github-oidc.GithubActionsRole",
		"fromRoleArn",
		[]interface{}{scope, id, roleArn, options},
		&returns,
	)

	return returns
}

// Import an external role by name.
//
// The imported role is assumed to exist in the same account as the account
// the scope's containing Stack is being deployed to.
// Experimental.
func GithubActionsRole_FromRoleName(scope constructs.Construct, id *string, roleName *string, options *awsiam.FromRoleNameOptions) awsiam.IRole {
	_init_.Initialize()

	if err := validateGithubActionsRole_FromRoleNameParameters(scope, id, roleName, options); err != nil {
		panic(err)
	}
	var returns awsiam.IRole

	_jsii_.StaticInvoke(
		"aws-cdk-github-oidc.GithubActionsRole",
		"fromRoleName",
		[]interface{}{scope, id, roleName, options},
		&returns,
	)

	return returns
}

// Checks if `x` is a construct.
//
// Returns: true if `x` is an object created from a class which extends `Construct`.
// Deprecated: use `x instanceof Construct` instead.
func GithubActionsRole_IsConstruct(x interface{}) *bool {
	_init_.Initialize()

	if err := validateGithubActionsRole_IsConstructParameters(x); err != nil {
		panic(err)
	}
	var returns *bool

	_jsii_.StaticInvoke(
		"aws-cdk-github-oidc.GithubActionsRole",
		"isConstruct",
		[]interface{}{x},
		&returns,
	)

	return returns
}

// Returns true if the construct was created by CDK, and false otherwise.
// Experimental.
func GithubActionsRole_IsOwnedResource(construct constructs.IConstruct) *bool {
	_init_.Initialize()

	if err := validateGithubActionsRole_IsOwnedResourceParameters(construct); err != nil {
		panic(err)
	}
	var returns *bool

	_jsii_.StaticInvoke(
		"aws-cdk-github-oidc.GithubActionsRole",
		"isOwnedResource",
		[]interface{}{construct},
		&returns,
	)

	return returns
}

// Check whether the given construct is a Resource.
// Experimental.
func GithubActionsRole_IsResource(construct constructs.IConstruct) *bool {
	_init_.Initialize()

	if err := validateGithubActionsRole_IsResourceParameters(construct); err != nil {
		panic(err)
	}
	var returns *bool

	_jsii_.StaticInvoke(
		"aws-cdk-github-oidc.GithubActionsRole",
		"isResource",
		[]interface{}{construct},
		&returns,
	)

	return returns
}

// Return whether the given object is a Role.
// Experimental.
func GithubActionsRole_IsRole(x interface{}) *bool {
	_init_.Initialize()

	if err := validateGithubActionsRole_IsRoleParameters(x); err != nil {
		panic(err)
	}
	var returns *bool

	_jsii_.StaticInvoke(
		"aws-cdk-github-oidc.GithubActionsRole",
		"isRole",
		[]interface{}{x},
		&returns,
	)

	return returns
}

func (g *jsiiProxy_GithubActionsRole) AddManagedPolicy(policy awsiam.IManagedPolicy) {
	if err := g.validateAddManagedPolicyParameters(policy); err != nil {
		panic(err)
	}
	_jsii_.InvokeVoid(
		g,
		"addManagedPolicy",
		[]interface{}{policy},
	)
}

func (g *jsiiProxy_GithubActionsRole) AddToPolicy(statement awsiam.PolicyStatement) *bool {
	if err := g.validateAddToPolicyParameters(statement); err != nil {
		panic(err)
	}
	var returns *bool

	_jsii_.Invoke(
		g,
		"addToPolicy",
		[]interface{}{statement},
		&returns,
	)

	return returns
}

func (g *jsiiProxy_GithubActionsRole) AddToPrincipalPolicy(statement awsiam.PolicyStatement) *awsiam.AddToPrincipalPolicyResult {
	if err := g.validateAddToPrincipalPolicyParameters(statement); err != nil {
		panic(err)
	}
	var returns *awsiam.AddToPrincipalPolicyResult

	_jsii_.Invoke(
		g,
		"addToPrincipalPolicy",
		[]interface{}{statement},
		&returns,
	)

	return returns
}

func (g *jsiiProxy_GithubActionsRole) ApplyRemovalPolicy(policy awscdk.RemovalPolicy) {
	if err := g.validateApplyRemovalPolicyParameters(policy); err != nil {
		panic(err)
	}
	_jsii_.InvokeVoid(
		g,
		"applyRemovalPolicy",
		[]interface{}{policy},
	)
}

func (g *jsiiProxy_GithubActionsRole) AttachInlinePolicy(policy awsiam.Policy) {
	if err := g.validateAttachInlinePolicyParameters(policy); err != nil {
		panic(err)
	}
	_jsii_.InvokeVoid(
		g,
		"attachInlinePolicy",
		[]interface{}{policy},
	)
}

func (g *jsiiProxy_GithubActionsRole) GeneratePhysicalName() *string {
	var returns *string

	_jsii_.Invoke(
		g,
		"generatePhysicalName",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (g *jsiiProxy_GithubActionsRole) GetResourceArnAttribute(arnAttr *string, arnComponents *awscdk.ArnComponents) *string {
	if err := g.validateGetResourceArnAttributeParameters(arnAttr, arnComponents); err != nil {
		panic(err)
	}
	var returns *string

	_jsii_.Invoke(
		g,
		"getResourceArnAttribute",
		[]interface{}{arnAttr, arnComponents},
		&returns,
	)

	return returns
}

func (g *jsiiProxy_GithubActionsRole) GetResourceNameAttribute(nameAttr *string) *string {
	if err := g.validateGetResourceNameAttributeParameters(nameAttr); err != nil {
		panic(err)
	}
	var returns *string

	_jsii_.Invoke(
		g,
		"getResourceNameAttribute",
		[]interface{}{nameAttr},
		&returns,
	)

	return returns
}

func (g *jsiiProxy_GithubActionsRole) Grant(grantee awsiam.IPrincipal, actions ...*string) awsiam.Grant {
	if err := g.validateGrantParameters(grantee); err != nil {
		panic(err)
	}
	args := []interface{}{grantee}
	for _, a := range actions {
		args = append(args, a)
	}

	var returns awsiam.Grant

	_jsii_.Invoke(
		g,
		"grant",
		args,
		&returns,
	)

	return returns
}

func (g *jsiiProxy_GithubActionsRole) GrantAssumeRole(identity awsiam.IPrincipal) awsiam.Grant {
	if err := g.validateGrantAssumeRoleParameters(identity); err != nil {
		panic(err)
	}
	var returns awsiam.Grant

	_jsii_.Invoke(
		g,
		"grantAssumeRole",
		[]interface{}{identity},
		&returns,
	)

	return returns
}

func (g *jsiiProxy_GithubActionsRole) GrantPassRole(identity awsiam.IPrincipal) awsiam.Grant {
	if err := g.validateGrantPassRoleParameters(identity); err != nil {
		panic(err)
	}
	var returns awsiam.Grant

	_jsii_.Invoke(
		g,
		"grantPassRole",
		[]interface{}{identity},
		&returns,
	)

	return returns
}

func (g *jsiiProxy_GithubActionsRole) ToString() *string {
	var returns *string

	_jsii_.Invoke(
		g,
		"toString",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (g *jsiiProxy_GithubActionsRole) WithoutPolicyUpdates(options *awsiam.WithoutPolicyUpdatesOptions) awsiam.IRole {
	if err := g.validateWithoutPolicyUpdatesParameters(options); err != nil {
		panic(err)
	}
	var returns awsiam.IRole

	_jsii_.Invoke(
		g,
		"withoutPolicyUpdates",
		[]interface{}{options},
		&returns,
	)

	return returns
}

